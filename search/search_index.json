{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to datamule","text":"<p>datamule is a project to make it easy to manipulate Securities and Exchanges Commission data. This documentation will focus on datamule-python, which is an open-source python package.</p>"},{"location":"#components","title":"Components","text":"<ol> <li>datamule-python - the python package.</li> <li>datamule-data - data repository that updates daily, used to keep .package up to date</li> <li>datamule-indicators - create indicators from SEC data.</li> <li>secsgml - parse SEC Standardized Generalized Markup Language.</li> <li>doc2dict - convert documents to dictionaries.</li> <li>txt2dataset - create datasets from unstructured text.</li> </ol>"},{"location":"providers/","title":"Providers","text":"<p>datamule supports multiple data providers.</p>"},{"location":"providers/#sec","title":"SEC","text":"<ul> <li>Rate limited (5/s)</li> </ul>"},{"location":"providers/#datamule","title":"datamule","text":"<ul> <li>No rate limits</li> <li>Convenience fee</li> </ul>"},{"location":"providers/#pricing","title":"Pricing","text":"<ul> <li>$1 / 100,000 SEC Archive downloads - will try to lower this to $.01 in the future.</li> <li>$60 / tb queried for SEC Data Warehouse (e.g. Sheet()) - this is 10x the BigQuery cost of provision.</li> </ul>"},{"location":"providers/#self-hosting","title":"Self-hosting","text":""},{"location":"providers/#bootstrap-guides","title":"Bootstrap Guides","text":"<p>The data provided by datamule can be self hosted. Here are some rough guides.</p> <ol> <li>Putting Institutional Holdings in a Data Warehouse</li> <li>How to host the SEC Archive for $20/month</li> </ol>"},{"location":"providers/#bringing-the-data-into-your-own-cloud","title":"Bringing the data into your own cloud","text":"<p>If you want to ingest data into your own infrastructure (e.g. Snowflake), feel free to contact me. </p>"},{"location":"datamule-python/","title":"datamule-python","text":"<p>Documentation for the python package.</p> This package is in beta <p>Things change frequently. If a change messes with your workflow, please submit an issue.</p>"},{"location":"datamule-python/data_provider/","title":"Data Providers","text":"<p>You can use the sec or datamule as a provider; sec is the default.</p>"},{"location":"datamule-python/data_provider/#using-datamule-as-a-data-provider","title":"Using Datamule as a Data Provider","text":"<ol> <li> <p>Get a key from the Datamule Dashboard</p> </li> <li> <p>Configure the API Key</p> <p>Using Windows Powershell <pre><code>[System.Environment]::SetEnvironmentVariable('DATAMULE_API_KEY', 'your-api-key', 'User')\n</code></pre></p> <p>Using macOS <pre><code>echo 'export DATAMULE_API_KEY=\"your-api-key\"' &gt;&gt; ~/.zshrc\nsource ~/.zshrc\n</code></pre></p> <p>Using Linux <pre><code>echo 'export DATAMULE_API_KEY=\"your-api-key\"' &gt;&gt; ~/.bashrc\nsource ~/.bashrc\n</code></pre></p> </li> <li> <p>Configure Default Provider (Optional)</p> </li> </ol> <p>You can set Datamule as your default data provider:</p> <pre><code>from datamule import Config\n\nconfig = Config()\nconfig.set_default_source(\"datamule\")  # Options: \"datamule\", \"sec\"\n\n# Verify your settings\nprint(f\"Default source: {config.get_default_source()}\")\n</code></pre> <p>The config file is stored in the User's home directory (e.g. for Windows: <code>C:\\Users\\{username}\\.datamule</code>) as <code>config.json</code></p> <p>Environment Variables</p> <p>Make sure to restart your terminal or IDE after setting environment variables to ensure they take effect.</p>"},{"location":"datamule-python/package_data/","title":"Package Data","text":"<p>Package data is stored in this repository and is updated daily using GitHub Actions using <code>process_submissions_metadata</code> from <code>datamule.sec.infrastructure.submissions_metadata</code>. Package data is stored in the User's home. e.g. for Windows: <code>C:\\Users\\{username}\\.datamule</code>.</p>"},{"location":"datamule-python/package_data/#updating-data","title":"Updating Data","text":"<pre><code>from datamule import PackageUpdater\n\nupdater = PackageUpdater()\n\n# downloads the latest data from GitHub\nupdater.update_package_data()\n</code></pre>"},{"location":"datamule-python/quickstart/","title":"Quickstart","text":""},{"location":"datamule-python/quickstart/#installation","title":"Installation","text":"<pre><code>pip install datamule\n</code></pre>"},{"location":"datamule-python/quickstart/#basic-usage","title":"Basic Usage","text":""},{"location":"datamule-python/quickstart/#portfolio","title":"Portfolio","text":"<pre><code>from datamule import Portfolio\n\n# Create a Portfolio object\nportfolio = Portfolio('output_dir') # can be an existing directory or a new one\n\n# Download submissions\nportfolio.download_submissions(\n   filing_date=('2023-01-01','2023-01-03'),\n   submission_type=['10-K']\n)\n\n# Iterate through documents by document type\nfor ten_k in portfolio.document_type('10-K'):\n   ten_k.parse()\n   print(ten_k.data['document']['part2']['item7'])\n\n# For faster operations, you can take advantage of built in threading with callback function\ndef callback(submission):\n   print(submission.path)\n\nsubmission_results = portfolio.process_submissions(callback)\n</code></pre>"},{"location":"datamule-python/quickstart/#sheet","title":"Sheet","text":"<pre><code>from datamule import Sheet\n\nsheet = Sheet('apple')\n\nsheet.download_xbrl(ticker='AAPL')\n</code></pre>"},{"location":"datamule-python/quickstart/#index","title":"Index","text":"<pre><code># Search for \"risk factors\" in Apple's 10-K filings\nindex = Index()\nresults = index.search_submissions(\n    text_query='\"risk factors\"',\n    submission_type=\"10-K\",\n    ticker=\"AAPL\",\n    filing_date=(\"2023-01-01\",\"2023-01-31\")\n)\n\n# Search for \"war\" but exclude \"peace\" in 10-K filings from January 2023 using 3 requests per second\nresults = index.search_submissions(\n    text_query='war NOT peace',\n    submission_type=\"10-K\",\n    filing_date=(\"2023-01-01\",\"2023-01-31\"),\n    quiet=False,\n    requests_per_second=3\n)\n</code></pre>"},{"location":"datamule-python/config/config/","title":"Config","text":"<p>Sets the default data provider. Option are <code>sec</code> (default) or <code>datamule</code> which requires an api key. <pre><code>from datamule import Config\n\nconfig = Config()\nconfig.set_default_source(\"datamule\")  # Options: \"datamule\", \"sec\"\n\n# Verify your settings\nprint(f\"Default source: {config.get_default_source()}\")\n</code></pre></p>"},{"location":"datamule-python/index/","title":"Index","text":"<p>Index is a class that allows you to search SEC submissions using simple or complex search terms.</p>"},{"location":"datamule-python/index/#methods","title":"Methods","text":""},{"location":"datamule-python/index/#search_submissions","title":"<code>search_submissions</code>","text":"<pre><code>search_submissions(\n        self,\n        text_query,\n        filing_date=None,\n        submission_type=None,\n        cik=None,\n        ticker=None,\n        requests_per_second=5.0,\n        quiet=True,\n        **kwargs\n    ):\n</code></pre>"},{"location":"datamule-python/index/#results-format","title":"Results Format","text":"<p>The <code>search_submissions</code> method returns a list of dictionaries containing search results:</p> <pre><code>[\n{\n    \"_index\": \"edgar_file\",\n    \"_id\": \"0001628280-24-002390:tsla-2023x12x31xex211.htm\",\n    \"_score\": 10.79173,\n    \"_source\": {\n        \"ciks\": [\"0001318605\"],\n        \"period_ending\": \"2023-12-31\",\n        \"file_num\": [\"001-34756\"],\n        \"display_names\": [\"Tesla, Inc.  (TSLA)  (CIK 0001318605)\"],\n        \"root_forms\": [\"10-K\"],\n        \"file_date\": \"2024-01-29\",\n        \"form\": \"10-K\",\n        \"adsh\": \"0001628280-24-002390\",\n        \"file_type\": \"EX-21.1\",\n        \"file_description\": \"EX-21.1\",\n        # Additional fields omitted for brevity\n    }\n},...\n]\n</code></pre>"},{"location":"datamule-python/index/#parameters","title":"Parameters","text":"<ul> <li>text_query: Text to search for in SEC filings</li> <li>filing_date: Filing date in form <code>('YYYY-MM-DD','YYYY-MM-DD')</code></li> <li>submission_type: Type of SEC submission (e.g., '10-K', '10-Q', '8-K')</li> <li>cik: CIK(s) to filter by (company identifier(s))</li> <li>ticker: Ticker(s) to filter by (stock symbol(s))</li> <li>quiet: Whether to suppress output (default: True)</li> </ul>"},{"location":"datamule-python/index/#text-query-syntax","title":"Text Query Syntax","text":"<p>The <code>text_query</code> parameter supports a modified Elasticsearch syntax with the following operators:</p>"},{"location":"datamule-python/index/#1-boolean-operators","title":"1. Boolean Operators","text":"<ul> <li><code>term1 OR term2</code> - Either term can appear</li> <li><code>term1 NOT term2</code> or <code>term1 -term2</code> - Excludes documents containing the second term</li> <li><code>term1 term2</code> - Both terms must appear.</li> <li>Example: <code>revenue OR growth NOT decline</code></li> </ul>"},{"location":"datamule-python/index/#2-exact-phrase-matching","title":"2. Exact Phrase Matching","text":"<ul> <li>Use double quotes for exact phrase matching</li> <li>Example: <code>\"revenue growth\"</code></li> </ul>"},{"location":"datamule-python/index/#3-wildcards","title":"3. Wildcards","text":"<ul> <li>Single character (<code>?</code>) and multiple character (<code>*</code>) wildcards</li> <li>Example: <code>risk factor?</code> - Matches \"risk factor\", \"risk factors\", etc.</li> </ul>"},{"location":"datamule-python/index/#4-boosting","title":"4. Boosting","text":"<ul> <li>Use double asterisk (<code>**</code>) followed by a number to increase term importance</li> <li>Example: <code>revenue**2 growth</code> - Makes \"revenue\" twice as important</li> </ul>"},{"location":"datamule-python/index/#5-near","title":"5. Near","text":"<ul> <li>Example <code>war NEAR(5) russia</code></li> </ul>"},{"location":"datamule-python/index/#limitations-to-note","title":"Limitations to Note","text":"<ul> <li>Complex Nesting: Avoid using parentheses for grouping as they may be interpreted as literal search terms</li> <li>Instead of: <code>(revenue OR sales) AND growth</code></li> <li> <p>Use: <code>\"revenue growth\" OR \"sales growth\"</code></p> </li> <li> <p>Proximity &amp; Fuzzy Searches: This implementation does not support proximity searches with the tilde operator (<code>~</code>) or fuzzy matching</p> </li> </ul>"},{"location":"datamule-python/index/#kwargs","title":"**kwargs","text":"<p>For additional search parameters see metadata filtering.</p>"},{"location":"datamule-python/index/#key-components-of-results","title":"Key Components of Results","text":"<ul> <li><code>_id</code>: Document identifier (format: accession_number:matched document)</li> <li><code>_score</code>: Relevance score indicating match quality</li> <li><code>_source</code>: Filing metadata including:</li> <li><code>ciks</code>: Company identifiers</li> <li><code>period_ending</code>: End date of reporting period</li> <li><code>display_names</code>: Company name with ticker and CIK</li> <li><code>root_forms</code>: Primary form type</li> <li><code>file_date</code>: Filing date</li> <li><code>adsh</code>: Accession number</li> </ul>"},{"location":"datamule-python/index/#examples","title":"Examples","text":"<pre><code># Search for \"risk factors\" in Apple's 10-K filings\nindex = Index()\nresults = index.search_submissions(\n    text_query='\"risk factors\"',\n    submission_type=\"10-K\",\n    ticker=\"AAPL\",\n    start_date=\"2020-01-01\",\n    end_date=\"2023-12-31\"\n)\n\n# Search for \"war\" but exclude \"peace\" in 10-K filings from January 2023\nresults = index.search_submissions(\n    text_query='war NOT peace',\n    submission_type=\"10-K\",\n    start_date=\"2023-01-01\",\n    end_date=\"2023-01-31\",\n    quiet=False,\n    requests_per_second=3\n)\n</code></pre>"},{"location":"datamule-python/portfolio/document/","title":"Document","text":"<p>The <code>Document</code> class represents a single file in a SEC Submission.</p>"},{"location":"datamule-python/portfolio/document/#attributes","title":"Attributes","text":"<ul> <li><code>document.accession</code> - submission accession number</li> <li><code>document.path</code> - document file path</li> <li><code>document.filing_date</code> - submission filing date</li> <li><code>document.extension</code> - document file extension, e.g. '.xml'</li> <li><code>document.content</code> - document in either string or bytes format.</li> <li><code>document.data</code> - parsed document content created after <code>document.parse()</code></li> </ul>"},{"location":"datamule-python/portfolio/document/#contains_string","title":"<code>contains_string</code>","text":"<pre><code>contains_string(self, pattern)\n</code></pre>"},{"location":"datamule-python/portfolio/document/#example","title":"Example","text":"<pre><code>pattern = r'(?i)chatgpt'\ndocument.contains_string(pattern)\n</code></pre>"},{"location":"datamule-python/portfolio/document/#parse","title":"<code>parse</code>","text":"<p>Parses a document into dictionary form, and applies a mapping dict. Currently supports any file in <code>html</code>, <code>xml</code>, and some <code>txt</code> formats. Most do not have mapping dicts written yet, so are a bit less standardized.</p>"},{"location":"datamule-python/portfolio/document/#visualize","title":"<code>visualize</code>","text":"<p>Opens a document using webbrowser. Only works for certain file extensions.</p>"},{"location":"datamule-python/portfolio/document/#get_section","title":"<code>get_section</code>","text":"<p>Gets section by title. <pre><code># returns a list of dictionaries preserving hierarcy - a list in case there are multiple sections with the same title\nget_section(title='parti', format='dict'):\n# returns a list of flattened version of dict form\nget_section(title='signatures', format='text'):\n\n# return all sections with title including item1, e.g. item1, item1a,...\nget_section(r\"item1.*\",format='dict')\n\n# returns all sections starting with income\nget_section(r\"income.*\",format='dict')\n</code></pre></p> <p>Note that <code>get_section</code> will return matches for <code>title</code> (original title) or <code>standardized_title</code> (standarized title - e.g. \"ITEM 1A. RISK FACTORS\" -&gt; 'item1a').</p>"},{"location":"datamule-python/portfolio/document/#tables","title":"<code>tables</code>","text":"<pre><code>document.tables()\n</code></pre> <p>If the document has extension '.xml', parses the xml into tables.</p>"},{"location":"datamule-python/portfolio/document/#write_csv","title":"<code>write_csv</code>","text":"<p><pre><code>write_csv(self, output_folder)\n</code></pre> If the document has extension '.xml', parses the xml into tables, then writes to disk using append.</p>"},{"location":"datamule-python/portfolio/document/#write_json","title":"<code>write_json</code>","text":"<p>Writes <code>self.data</code> to json.</p>"},{"location":"datamule-python/portfolio/portfolio/","title":"Portfolio","text":"<p>The <code>Portfolio</code> class lets you interact with SEC Submissions. Portfolio's consist of a folder that contains subfolders named after SEC Submission accession numbers.</p>"},{"location":"datamule-python/portfolio/portfolio/#attributes","title":"Attributes","text":"<ul> <li><code>portfolio.path</code> - path to folder</li> </ul>"},{"location":"datamule-python/portfolio/portfolio/#set_api_key","title":"<code>set_api_key</code>","text":"<p>Use this if you don't want to store the api key as environmental variable. <pre><code>set_api_key(api_key)\n</code></pre></p>"},{"location":"datamule-python/portfolio/portfolio/#download_submissions","title":"<code>download_submissions</code>","text":"<pre><code>download_submissions(self, cik=None, ticker=None, submission_type=None, filing_date=None, provider=None,document_type=None,requests_per_second=5, **kwargs)\n</code></pre>"},{"location":"datamule-python/portfolio/portfolio/#parameters","title":"Parameters","text":"<ul> <li>cik - company CIK, e.g. <code>0001318605</code> or <code>1318605</code> or <code>['0001318605','789019']</code></li> <li>ticker - e.g. <code>'TSLA'</code> or <code>['TSLA','AAPL','MSFT']</code></li> <li>submission_type - the submission type e.g. <code>'10-K'</code> or <code>['3','4','5']</code></li> <li>document_type - arg for downloading only a specific document type in a submission. e.g. setting to <code>'PROXY VOTING RECORD'</code> for <code>submission_type='N-PX'</code> will only download the proxy voting record file.</li> <li>filing_date - e.g. <code>'2023-05-09'</code> or <code>('2023-01-01','2024-01-01')</code> or `['2023-01-01','2024-21-11','2025-23-01']</li> <li>provider - e.g. <code>sec</code> or <code>datamule</code>. will use defaults from config</li> <li>requests_per_second - sec hard rate limit is 10/s, soft limit is 5/s over long durations.</li> <li>**kwargs</li> </ul>"},{"location":"datamule-python/portfolio/portfolio/#filtering","title":"Filtering","text":"<p>Filtering filters what submissions are downloaded. Filters can be chained.</p>"},{"location":"datamule-python/portfolio/portfolio/#example","title":"Example","text":"<pre><code>portfolio.filter_text('\"climate change\"', filing_date=('2019-01-01', '2019-01-31'), submission_type='10-K')\nportfolio.filter_text('drought', filing_date=('2019-01-01', '2019-01-31'), submission_type='10-K')\nportfolio.download_submissions(filing_date=('2019-01-01', '2019-01-31'), submission_type='10-K')\n</code></pre>"},{"location":"datamule-python/portfolio/portfolio/#filter_text","title":"<code>filter_text</code>","text":"<pre><code>filter_text(self, text_query, cik=None, ticker=None, submission_type=None, filing_date=None, **kwargs)\n</code></pre>"},{"location":"datamule-python/portfolio/portfolio/#parameters_1","title":"Parameters","text":"<ul> <li>text_query - e.g. \"machine learning\". For more information click here</li> <li>cik - company CIK, e.g. <code>0001318605</code> or <code>1318605</code> or <code>['0001318605','789019']</code></li> <li>ticker - e.g. <code>'TSLA'</code> or <code>['TSLA','AAPL','MSFT']</code></li> <li>submission_type - the submission type e.g. <code>'10-K'</code> or <code>['3','4','5']</code></li> <li>filing_date - e.g. <code>'2023-05-09'</code> or <code>('2023-01-01','2024-01-01')</code> or `['2023-01-01','2024-21-11','2025-23-01']</li> <li>**kwargs</li> </ul>"},{"location":"datamule-python/portfolio/portfolio/#filter_xbrl","title":"<code>filter_xbrl</code>","text":"<pre><code>filter_xbrl(self, taxonomy, concept, unit, period, logic, value)\n</code></pre> <p>For help filling out args, see this.</p>"},{"location":"datamule-python/portfolio/portfolio/#parameters_2","title":"Parameters","text":"<ul> <li>taxonomy - e.g. <code>dei</code>,<code>us-gaap</code>, etc.</li> <li>concept - e.g. <code>AccountsPayableCurrent</code></li> <li>unit - e.g. <code>USD</code></li> <li>period - e.g. <code>CY2019Q4I</code></li> <li>logic - <code>'&gt;'</code>,<code>'&gt;='</code>,<code>'=='</code>,<code>'!='</code>, <code>'&lt;='</code>, <code>'&lt;'</code></li> </ul>"},{"location":"datamule-python/portfolio/portfolio/#monitor_submissions","title":"<code>monitor_submissions</code>","text":"<pre><code>monitor_submissions(data_callback=None, interval_callback=None,\n                            polling_interval=1000, quiet=True, start_date=None,\n                            validation_interval=60000)\n</code></pre>"},{"location":"datamule-python/portfolio/portfolio/#hits-format","title":"hits format:","text":"<pre><code>[{'accession': 95017022000796,\n'ciks': ['1318605']\n'filing_date':'2022-02-07'}...]\n</code></pre>"},{"location":"datamule-python/portfolio/portfolio/#parameters_3","title":"Parameters","text":"<ul> <li>data_callback - function that uses hits</li> <li>interval_callback - function that is called between polls</li> <li>quiet - whether to print output</li> <li>start_date - start date for backfill</li> <li>polling_interval - time in ms to poll the rss feed. If set to None, will never poll</li> <li>validation_interval - time to run more robust check of what submissions have been submitted. If set to None, will never validate</li> </ul> rate limit sharing <p>will update this later to add documentation for rate limit sharing - e.g. downloading each submission as they come out</p>"},{"location":"datamule-python/portfolio/portfolio/#example_1","title":"Example","text":"<pre><code>from datamule import Portfolio\nfrom time import time\n\nstart_time = time()\n\nportfolio = Portfolio('test')\nportfolio.monitor.set_domain_rate_limit(domain='sec.gov', rate=3)\ndef interval_callback():\n    global start_time\n    print(f\"elapsed time: {time() - start_time} seconds\")\n\ndef data_callback(hits):\n    print(f\"Number of new hits: {len(hits)}\")\n\nportfolio.monitor_submissions(validation_interval=60000,start_date='2025-04-25',\n                                   quiet=True,polling_interval=1000,\n                                   interval_callback=interval_callback,data_callback=data_callback)\n</code></pre> Architecture <p>There are two ways to Monitor SEC submissions in real time. 1. RSS - ~25% of submissions are missed 2. EFTS - often 30-50s slower than the RSS feed The <code>Monitor</code> class is a compromise that uses both systems. I will likely do a write up on how it works later on, because both systems are annoying to work with. If you have a use-case that requires insane levels of speed, feel free to email me for advice.</p>"},{"location":"datamule-python/portfolio/portfolio/#document_type","title":"<code>document_type</code>","text":"<p>Iterate through documents in a portfolio based on type.</p>"},{"location":"datamule-python/portfolio/portfolio/#example_2","title":"Example","text":"<pre><code>for document in portfolio.document_type('10-K'):\n    print(document.path)\n</code></pre>"},{"location":"datamule-python/portfolio/portfolio/#iterable","title":"Iterable","text":"<p>Iterate through submissions in a portfolio.</p>"},{"location":"datamule-python/portfolio/portfolio/#example_3","title":"Example","text":"<pre><code>for submission in portfolio:\n    print(submission.path)\n</code></pre>"},{"location":"datamule-python/portfolio/portfolio/#process_submissions","title":"<code>process_submissions</code>","text":"<p>Process submissions within a portfolio using threading (faster). <pre><code>process_submissions(self, callback)\n</code></pre></p>"},{"location":"datamule-python/portfolio/portfolio/#example_4","title":"Example","text":"<pre><code>def callback_function(submission):\n    print(submission.metadata['cik'])\n\n# Process submissions - note that filters are applied here\nportfolio.process_submissions(callback=callback_function)\n</code></pre>"},{"location":"datamule-python/portfolio/portfolio/#process_documents","title":"<code>process_documents</code>","text":"<p>Process documents within a portfolio using threading (faster). <pre><code>process_documents(self, callback)\n</code></pre></p>"},{"location":"datamule-python/portfolio/portfolio/#example_5","title":"Example","text":"<pre><code>def callback_function(document):\n    print(document.path)\n\n# Process submissions - note that filters are applied here\nportfolio.process_documents(callback=callback_function)\n</code></pre>"},{"location":"datamule-python/portfolio/submission/","title":"Submission","text":"metadata rewrite <p><code>submission.metadata</code> will soon be moved to the <code>Portfolio</code> level, to allow for better indexing and speed.</p> <p>The <code>Submission</code> class represents a SEC filing. The name <code>Submission</code> comes from the <code>&lt;SUBMISSION&gt;</code> tag in the original SEC SGML Submission.</p>"},{"location":"datamule-python/portfolio/submission/#attributes","title":"Attributes","text":"<ul> <li><code>submission.path</code> - Submission path</li> <li><code>submission.accession</code> - Submission accession</li> <li><code>submission.filing_date</code> - when the submission was filed</li> <li><code>submission.metadata</code> - additional metadata about the submission in dictionary form.</li> </ul>"},{"location":"datamule-python/portfolio/submission/#document_type","title":"<code>document_type</code>","text":"<p>Access all documents in a submission by document type.</p>"},{"location":"datamule-python/portfolio/submission/#example","title":"Example","text":"<pre><code>for document in submission.document_type('10-K'):\n    print(document.path)\n</code></pre>"},{"location":"datamule-python/portfolio/submission/#iterable","title":"iterable","text":"<p>Access documents in a submission without filtering.</p>"},{"location":"datamule-python/portfolio/submission/#example_1","title":"Example","text":"<pre><code>for document in submission:\n    print(document.path)\n</code></pre>"},{"location":"datamule-python/portfolio/table/table/","title":"Table","text":"<p>Tables are created by flattening '.xml' documents. One '.xml' document may have many tables.</p>"},{"location":"datamule-python/portfolio/table/table/#attributes","title":"Attributes","text":"<ul> <li><code>table.type</code> - table type e.g. <code>non_derivative_holding_ownership</code></li> <li><code>table.accession</code> - submission accession number</li> <li><code>table.columns</code> - table's columns</li> <li><code>table.data</code> - table data in a list of dictionaries. </li> </ul>"},{"location":"datamule-python/portfolio/table/table/#quickstart","title":"Quickstart","text":"<pre><code>from datamule import Portfolio\nportfolio = Portfolio('345')\nportfolio.download_submissions(filing_date=('2020-01-01','2020-01-01'),submission_type=['3','4','5'])\nfor document in portfolio.document_type(['3','4','5']):\n    document.write_csv(output_folder='ownership')\n</code></pre> Table is new <p>Will make the UI better, likely improvements include passing as iterable</p>"},{"location":"datamule-python/portfolio/table/types/","title":"Table Types","text":"This will be fleshed out in the future <p>There are 100+ tables</p>"},{"location":"datamule-python/portfolio/table/types/#abs-ee","title":"ABS-EE","text":""},{"location":"datamule-python/portfolio/table/types/#ex-102","title":"EX-102","text":""},{"location":"datamule-python/portfolio/table/types/#assets_ex102_absee","title":"assets_ex102_absee","text":""},{"location":"datamule-python/portfolio/table/types/#properties_ex102_absee","title":"properties_ex102_absee","text":"<p>Each asset in <code>assets_ex102_absee</code> may have a <code>property</code> list or dictionary attached. If so, the <code>property</code> is extracted and made into its own table. The new tables can be mapped to <code>assets_ex102_absee</code> using <code>assetNumber</code> and <code>accession</code> keys.</p>"},{"location":"datamule-python/sec/submission_types/","title":"Submission Types","text":"placeholder <p>will complete this over time</p>"},{"location":"datamule-python/sec/submission_types/#13f-hr","title":"13F-HR","text":""},{"location":"datamule-python/sec/submission_types/#13f-hr_1","title":"13F-HR","text":""},{"location":"datamule-python/sec/submission_types/#information-table","title":"INFORMATION TABLE","text":""},{"location":"datamule-python/sheet/sheet/","title":"Sheet","text":"Rewrite Coming <p>This code will be rewritten soon as part of an update that allows conversion of all SEC xml files into tabular form.</p> Data last updated in mid april 2025 <p>This will be changed soon</p> <p>Sheet is a class that allows you to download and work with tabular datasets from the SEC (Securities and Exchange Commission).</p>"},{"location":"datamule-python/sheet/sheet/#functions","title":"Functions","text":""},{"location":"datamule-python/sheet/sheet/#xbrl-data","title":"XBRL Data","text":""},{"location":"datamule-python/sheet/sheet/#download_xbrlciknone-tickernone-kwargs","title":"<code>download_xbrl(cik=None, ticker=None, **kwargs)</code>","text":"<p>Retrieves XBRL data for companies and saves it to disk.</p> <p>If <code>cik</code> and <code>ticker</code> are not provided, data for all companies with tickers will be downloaded. The data is saved to the directory specified when initializing the Sheet.</p> <p>Parameters: - <code>cik</code>: Central Index Key identifier(s) for the company(ies) (str, int, list, or None) - <code>ticker</code>: Stock ticker symbol(s) (str, list, or None) - <code>**kwargs</code>: Additional search criteria including name, entityType, sic, sicDescription, ownerOrg, insiderTransactionForOwnerExists, insiderTransactionForIssuerExists, exchanges, ein, description, website, investorWebsite, category, fiscalYearEnd, stateOfIncorporation, stateOfIncorporationDescription, phone, flags, various address fields (mailing and business)</p> <p>Example:</p> <pre><code># Download XBRL data for Tesla\nsheet.download_xbrl(ticker=\"TSLA\")\n\n# Download XBRL data for multiple companies by CIK\nsheet.download_xbrl(cik=[\"1318605\", \"320193\"])  # Tesla and Apple\n</code></pre>"},{"location":"datamule-python/sheet/sheet/#form-13f-hr-information-table","title":"Form 13F-HR Information Table","text":""},{"location":"datamule-python/sheet/sheet/#get-data","title":"Get Data","text":""},{"location":"datamule-python/sheet/sheet/#get_information_tablecolumnsnone-api_keynone-print_costtrue-verbosefalse","title":"<code>get_information_table(columns=None, ..., api_key=None, print_cost=True, verbose=False)</code>","text":"<p>Query the SEC BigQuery API for 13F-HR information table data (institutional holdings).</p> <p>Parameters: - <code>columns</code>: Specific columns to return (List[str], optional) - <code>name_of_issuer</code>: Name of the issuing company (string, list, or None) - <code>title_of_class</code>: Class of securities (string, list, or None) - <code>cusip</code>: CUSIP identifier (string, list, or None) - <code>value</code>: Value of holdings in $ (numeric, tuple for range, or None) - <code>ssh_prnamt</code>: Number of shares held (numeric, tuple for range, or None) - <code>ssh_prnamt_type</code>: Type of shares (e.g., SH for shares) (string, list, or None) - <code>investment_discretion</code>: Level of investment discretion (string, list, or None) - <code>voting_authority_sole</code>: Shares with sole voting authority (numeric, tuple for range, or None) - <code>voting_authority_shared</code>: Shares with shared voting authority (numeric, tuple for range, or None) - <code>voting_authority_none</code>: Shares with no voting authority (numeric, tuple for range, or None) - <code>reporting_owner_cik</code>: CIK of the reporting owner (string, list, or None) - <code>put_call</code>: Put or call indicator (string, list, or None) - <code>other_manager</code>: Other managers reporting the security (string, list, or None) - <code>figi</code>: Financial Instrument Global Identifier (string, list, or None) - <code>accession</code>: SEC filing accession number (string, list, or None) - <code>filing_date</code>: Date of filing (string, list, or tuple for date range) - <code>api_key</code>: SEC BigQuery API key. If None, looks for DATAMULE_API_KEY env variable (string, optional) - <code>print_cost</code>: Whether to print the query cost information (bool) - <code>verbose</code>: Whether to print additional information about the query (bool)</p> <p>Return: Records matching the query (List[Dict])</p> <p>Filter Format Options: * String filters: Exact match (e.g., <code>cusip=\"023135106\"</code>) * List filters: Match any in list (e.g., <code>name_of_issuer=[\"Apple Inc\", \"Microsoft Corp\"]</code>) * Numeric range filters: (min, max) tuple (e.g., <code>value=(1000000, 10000000)</code>) * Date range filters: (start_date, end_date) tuple (e.g., <code>filing_date=(\"2023-01-01\", \"2023-12-31\")</code>)</p> <p>Example:</p> <pre><code># Get all BlackRock holdings of Apple stock\nholdings = sheet.get_information_table(\n    name_of_issuer=\"Apple Inc\",\n    reporting_owner_cik=\"1364742\",  # BlackRock\n    columns=[\"value\", \"ssh_prnamt\", \"filing_date\"]\n)\n</code></pre>"},{"location":"datamule-python/sheet/sheet/#download-to-csv","title":"Download to CSV","text":""},{"location":"datamule-python/sheet/sheet/#download_information_tablefilepath-columnsnone-api_keynone-print_costtrue-verbosefalse","title":"<code>download_information_table(filepath, columns=None, ..., api_key=None, print_cost=True, verbose=False)</code>","text":"<p>Query the SEC BigQuery API for 13F-HR information table data and save to CSV.</p> <p>Parameters: - <code>filepath</code>: Path where to save the CSV file (str) - <code>columns</code>: Specific columns to return (List[str], optional) - [All other parameters same as <code>get_information_table</code>]</p> <p>Example:</p> <pre><code># Download all Vanguard holdings to CSV\nsheet.download_information_table(\n    filepath=\"vanguard_holdings.csv\",\n    reporting_owner_cik=\"0000102909\",  # Vanguard\n    filing_date=(\"2023-01-01\", \"2023-12-31\"),\n    verbose=True\n)\n</code></pre>"},{"location":"datamule-python/sheet/sheet/#form-3-4-5-insider-transactions","title":"Form 3, 4, 5 (Insider Transactions)","text":""},{"location":"datamule-python/sheet/sheet/#get-data_1","title":"Get Data","text":""},{"location":"datamule-python/sheet/sheet/#get_345columnsnone-api_keynone-print_costtrue-verbosefalse","title":"<code>get_345(columns=None, ..., api_key=None, print_cost=True, verbose=False)</code>","text":"<p>Query the SEC BigQuery API for Form 3, 4, 5 insider transaction data.</p> <p>Parameters: - <code>columns</code>: Specific columns to return (List[str], optional) - <code>is_derivative</code>: Whether transaction involves derivative securities (boolean) - <code>is_non_derivative</code>: Whether transaction involves non-derivative securities (boolean) - <code>security_title</code>: Title of security (string, list, or None) - <code>transaction_date</code>: Date of transaction (string, list, or tuple for date range) - <code>document_type</code>: Form type (3, 4, or 5) (string, list, or None) - <code>transaction_code</code>: Transaction code (e.g., P for purchase, S for sale) (string, list, or None) - <code>equity_swap_involved</code>: Whether equity swap was involved (boolean) - <code>transaction_timeliness</code>: Timeliness of reporting (string, list, or None) - <code>transaction_shares</code>: Number of shares in transaction (numeric, tuple for range, or None) - <code>transaction_price_per_share</code>: Price per share (numeric, tuple for range, or None) - <code>shares_owned_following_transaction</code>: Shares owned after transaction (numeric, tuple for range, or None) - <code>ownership_type</code>: Type of ownership (D for direct, I for indirect) (string, list, or None) - <code>deemed_execution_date</code>: Deemed execution date (string, list, or tuple for date range) - <code>conversion_or_exercise_price</code>: Price for conversion or exercise (numeric, tuple for range, or None) - <code>exercise_date</code>: Exercise date (string, list, or tuple for date range) - <code>expiration_date</code>: Expiration date (string, list, or tuple for date range) - <code>underlying_security_title</code>: Title of underlying security (string, list, or None) - <code>underlying_security_shares</code>: Shares of underlying security (numeric, tuple for range, or None) - <code>underlying_security_value</code>: Value of underlying security (numeric, tuple for range, or None) - <code>accession</code>: SEC filing accession number (string, list, or None) - <code>reporting_owner_cik</code>: CIK of the reporting insider (string, list, or None) - <code>issuer_cik</code>: CIK of the company (string, list, or None) - <code>filing_date</code>: Date of filing (string, list, or tuple for date range) - <code>api_key</code>: SEC BigQuery API key. If None, looks for DATAMULE_API_KEY env variable (string, optional) - <code>print_cost</code>: Whether to print the query cost information (bool) - <code>verbose</code>: Whether to print additional information about the query (bool)</p> <p>Return: Records matching the query (List[Dict])</p> <p>Example:</p> <pre><code># Get all Elon Musk's Tesla transactions\ntransactions = sheet.get_345(\n    reporting_owner_cik=\"1494730\",  # Elon Musk's CIK\n    issuer_cik=\"1318605\",  # Tesla's CIK\n    columns=[\"transaction_date\", \"transaction_code\", \"transaction_shares\", \n             \"transaction_price_per_share\", \"is_derivative\"]\n)\n</code></pre>"},{"location":"datamule-python/sheet/sheet/#download-to-csv_1","title":"Download to CSV","text":""},{"location":"datamule-python/sheet/sheet/#download_345filepath-columnsnone-api_keynone-print_costtrue-verbosefalse","title":"<code>download_345(filepath, columns=None, ..., api_key=None, print_cost=True, verbose=False)</code>","text":"<p>Query the SEC BigQuery API for Form 3, 4, 5 insider transaction data and save to CSV.</p> <p>Parameters: - <code>filepath</code>: Path where to save the CSV file (str) - <code>columns</code>: Specific columns to return (List[str], optional) - [All other parameters same as <code>get_345</code>]</p> <p>Examples:</p> <pre><code># Download all Tesla insider transactions for a year\nsheet.download_345(\n    filepath=\"tesla_insider_transactions.csv\",\n    issuer_cik=\"1318605\",  # Tesla's CIK\n    filing_date=(\"2023-01-01\", \"2023-12-31\"),\n    columns=[\"transaction_date\", \"security_title\", \"transaction_code\", \n             \"transaction_shares\", \"transaction_price_per_share\", \n             \"reporting_owner_cik\", \"is_derivative\"],\n    verbose=True\n)\n\n# Download all Elon Musk's transactions to CSV\nsheet.download_345(\n    filepath=\"elon_transactions.csv\",\n    reporting_owner_cik=\"1494730\",  # Elon Musk's CIK\n    verbose=True\n)\n\n# Get all large insider acquisitions (over 10,000 shares)\nsheet.download_345(\n    filepath=\"large_acquisitions.csv\",\n    transaction_code=\"A\",  # Acquisition/grant\n    shares_owned_following_transaction=(10000, None),  # Minimum of 10,000 shares\n    is_derivative=False,  # Only non-derivative transactions\n    verbose=True\n)\n</code></pre>"},{"location":"datamule-python/sheet/sheet/#form-npx-proxy-voting-records","title":"Form NPX (Proxy Voting Records)","text":""},{"location":"datamule-python/sheet/sheet/#get-data_2","title":"Get Data","text":""},{"location":"datamule-python/sheet/sheet/#get_proxy_voting_recordcolumnsnone-api_keynone-print_costtrue-verbosefalse","title":"<code>get_proxy_voting_record(columns=None, ..., api_key=None, print_cost=True, verbose=False)</code>","text":"<p>Query the SEC BigQuery API for NPX proxy voting record data.</p> <p>Parameters: - <code>columns</code>: Specific columns to return (List[str], optional) - <code>meeting_date</code>: Date of shareholder meeting (string, list, or tuple for date range) - <code>isin</code>: International Securities Identification Number (string, list, or None) - <code>cusip</code>: CUSIP identifier (string, list, or None) - <code>issuer_name</code>: Name of the issuing company (string, list, or None) - <code>vote_description</code>: Description of the vote (string, list, or None) - <code>shares_on_loan</code>: Number of shares on loan (numeric, tuple for range, or None) - <code>shares_voted</code>: Number of shares voted (numeric, tuple for range, or None) - <code>vote_category</code>: Category of vote (string, list, or None) - <code>vote_record</code>: Record of vote (string, list, or None) - <code>vote_source</code>: Source of vote (string, list, or None) - <code>how_voted</code>: How the vote was cast (e.g., FOR, AGAINST, ABSTAIN) (string, list, or None) - <code>figi</code>: Financial Instrument Global Identifier (string, list, or None) - <code>management_recommendation</code>: Management's recommendation for the vote (string, list, or None) - <code>accession</code>: SEC filing accession number (string, list, or None) - <code>reporting_owner_cik</code>: CIK of the reporting owner (string, list, or None) - <code>filing_date</code>: Date of filing (string, list, or tuple for date range) - <code>api_key</code>: SEC BigQuery API key. If None, looks for DATAMULE_API_KEY env variable (string, optional) - <code>print_cost</code>: Whether to print the query cost information (bool) - <code>verbose</code>: Whether to print additional information about the query (bool)</p> <p>Return: Records matching the query (List[Dict])</p> <p>Filter Format Options: * String filters: Exact match (e.g., <code>cusip=\"037833100\"</code>) * List filters: Match any in list (e.g., <code>issuer_name=[\"Apple Inc\", \"Tesla, Inc\"]</code>) * Numeric range filters: (min, max) tuple (e.g., <code>shares_voted=(1000000, None)</code>) * Date range filters: (start_date, end_date) tuple (e.g., <code>filing_date=(\"2023-01-01\", \"2023-12-31\")</code>)</p> <p>Example:</p> <pre><code># Get all BlackRock votes for Apple in 2023\nvotes = sheet.get_proxy_voting_record(\n    issuer_name=\"Apple Inc\",\n    reporting_owner_cik=\"1364742\",  # BlackRock\n    meeting_date=(\"2023-01-01\", \"2023-12-31\"),\n    columns=[\"vote_description\", \"how_voted\", \"management_recommendation\"]\n)\n</code></pre>"},{"location":"datamule-python/sheet/sheet/#download-to-csv_2","title":"Download to CSV","text":""},{"location":"datamule-python/sheet/sheet/#download_proxy_voting_recordfilepath-columnsnone-api_keynone-print_costtrue-verbosefalse","title":"<code>download_proxy_voting_record(filepath, columns=None, ..., api_key=None, print_cost=True, verbose=False)</code>","text":"<p>Query the SEC BigQuery API for NPX proxy voting record data and save to CSV.</p> <p>Parameters: - <code>filepath</code>: Path where to save the CSV file (str) - <code>columns</code>: Specific columns to return (List[str], optional) - [All other parameters same as <code>get_proxy_voting_record</code>]</p> <p>Examples:</p> <pre><code># Download recent proxy votes\nsheet.download_proxy_voting_record(\n    filepath=\"recent_proxy_votes.csv\",\n    filing_date=(\"2025-02-01\", None),  # From February 2025 to present\n    verbose=True\n)\n\n# Download Apple and Microsoft proxy votes\nsheet.download_proxy_voting_record(\n    filepath=\"apple_msft_votes.csv\",\n    cusip=[\"037833100\", \"594918104\"],  # Apple and Microsoft CUSIPs\n    columns=[\"meetingDate\", \"issuerName\", \"voteDescription\", \"howVoted\", \n             \"sharesVoted\", \"filingDate\", \"reportingOwnerCIK\"]\n)\n\n# Download votes against management recommendations\nsheet.download_proxy_voting_record(\n    filepath=\"against_mgmt.csv\",\n    how_voted=\"AGAINST\",\n    management_recommendation=\"FOR\"\n)\n\n# Download all proxy votes for Tesla\nsheet.download_proxy_voting_record(\n    filepath=\"tesla.csv\",\n    cusip=\"88160R101\"  # Tesla's CUSIP\n)\n</code></pre>"},{"location":"datamule-python/sheet/sheet/#available-datasets","title":"Available Datasets","text":"<ul> <li>XBRL (via SEC, free): Company financial data in XBRL format</li> <li>Institutional Holdings (via datamule, paid): Constructed from 13F-HR INFORMATION TABLE</li> <li>Insider Transactions (via datamule, paid): Constructed from Forms 3, 4, and 5</li> <li>Proxy Voting Records (via datamule, paid): Constructed from Form NPX</li> </ul>"},{"location":"datamule-python/utils/_process_cik_and_metadata_filters/","title":"_process_cik_and_metadata_filters","text":"<p><code>_process_cik_and_metadata_filters</code> is a function that takes parameters such as <code>ticker</code> or <code>sic</code> and returns all CIKs which match using <code>.datamule\\listed_filer_metadata.csv</code>.</p>"},{"location":"datamule-python/utils/_process_cik_and_metadata_filters/#parameters","title":"Parameters","text":"<ul> <li><code>cik</code> - CIK number(s)</li> <li><code>ticker</code> - Stock ticker symbol(s)</li> <li><code>sic</code> - Standard Industrial Classification code(s)</li> <li><code>state</code> - State(s) of incorporation</li> <li><code>category</code> - Filer category</li> <li><code>industry</code> - Industry description</li> <li><code>exchange</code> - Stock exchange(s)</li> <li><code>name</code> - Company name</li> <li><code>business_city</code> - City of business</li> <li><code>business_stateOrCountry</code> - State/country of business</li> <li><code>ein</code> - Employer Identification Number</li> <li><code>entityType</code> - Entity type</li> <li><code>fiscalYearEnd</code> - Fiscal year end date</li> <li><code>insiderTransactionForIssuerExists</code> - Insider transaction flag</li> <li><code>insiderTransactionForOwnerExists</code> - Owner transaction flag</li> <li><code>mailing_city</code> - Mailing address city</li> <li><code>mailing_stateOrCountry</code> - Mailing address state/country</li> <li><code>ownerOrg</code> - Owner organization</li> <li><code>phone</code> - Phone number</li> <li><code>sicDescription</code> - SIC description</li> <li><code>stateOfIncorporationDescription</code> - State of incorporation description</li> <li><code>tickers</code> - List of ticker symbols</li> </ul>"}]}